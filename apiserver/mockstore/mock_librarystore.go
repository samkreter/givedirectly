// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/samkreter/givedirectly/apiserver (interfaces: LibraryStore)

// Package mockstore is a generated GoMock package.
package mockstore

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/samkreter/givedirectly/types"
)

// MockLibraryStore is a mock of LibraryStore interface.
type MockLibraryStore struct {
	ctrl     *gomock.Controller
	recorder *MockLibraryStoreMockRecorder
}

// MockLibraryStoreMockRecorder is the mock recorder for MockLibraryStore.
type MockLibraryStoreMockRecorder struct {
	mock *MockLibraryStore
}

// NewMockLibraryStore creates a new mock instance.
func NewMockLibraryStore(ctrl *gomock.Controller) *MockLibraryStore {
	mock := &MockLibraryStore{ctrl: ctrl}
	mock.recorder = &MockLibraryStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLibraryStore) EXPECT() *MockLibraryStoreMockRecorder {
	return m.recorder
}

// CreateRequest mocks base method.
func (m *MockLibraryStore) CreateRequest(arg0 context.Context, arg1 *types.Request) (*types.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRequest", arg0, arg1)
	ret0, _ := ret[0].(*types.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRequest indicates an expected call of CreateRequest.
func (mr *MockLibraryStoreMockRecorder) CreateRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRequest", reflect.TypeOf((*MockLibraryStore)(nil).CreateRequest), arg0, arg1)
}

// GetRequest mocks base method.
func (m *MockLibraryStore) GetRequest(arg0 context.Context, arg1 int) (*types.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest", arg0, arg1)
	ret0, _ := ret[0].(*types.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockLibraryStoreMockRecorder) GetRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*MockLibraryStore)(nil).GetRequest), arg0, arg1)
}

// ListRequest mocks base method.
func (m *MockLibraryStore) ListRequest(arg0 context.Context) ([]*types.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRequest", arg0)
	ret0, _ := ret[0].([]*types.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRequest indicates an expected call of ListRequest.
func (mr *MockLibraryStoreMockRecorder) ListRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRequest", reflect.TypeOf((*MockLibraryStore)(nil).ListRequest), arg0)
}
